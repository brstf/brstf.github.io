{"version":3,"sources":["shifting_sands/subs.cljs"],"mappings":"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","names":["G__69190","G__69191","re-frame.core/reg-sub","db","G__69192","G__69193","G__69194","G__69195","p__69196","p__69197","map__69198","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__69199","cljs.core.nth","floor","_","coord","cljs.core.get_in","G__69203","G__69204","shifting-sands.subs/room->adjacent-unexplored","room","shifting-sands.db/adjacent-coords","p1__69205#","cljs.core.map","cljs.core/PersistentHashMap","cljs.core/second","cljs.core.assoc","shifting-sands.db/universal-rooms","G__69206","shifting-sands.db/opposite-dir","cljs.core/first","cljs.core/merge","shifting-sands.subs/merge-unexplored-rooms","r1","r2","cljs.core.merge_with","v1","v2","cljs.core/coll?","cljs.core.into","cljs.core.concat","shifting-sands.subs/add-unexplored-rooms","floor-map","cljs.core.merge","cljs.core.partial","cljs.core/apply","cljs.core/merge-with","shifting-sands.subs/add-empty-rooms","map__69223","max-x","min-x","max-y","min-y","shifting-sands.db/get-map-bounds","iter__4529__auto__","s__69226","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4525__auto__","s__69228","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__69230","cljs.core/chunk-buffer","i__69229","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__69227","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","iter__69225","x","cljs.core.range","y","G__69231","G__69232","p__69233","map__69234","G__69236","G__69237","p__69238","map__69239","cljs.core/vals","cljs.core.sort_by","G__69241","G__69242","G__69243","G__69244","G__69245","G__69246","G__69247","G__69248","G__69275","G__69276","G__69277","G__69278","G__69279","G__69280","G__69281","G__69282","cljs.core/reverse","G__69283","G__69284","G__69285","G__69286","G__69287","G__69288","G__69289","G__69290","G__69291","G__69292","G__69293","G__69294","G__69295","G__69296","cljs.core/chunk-first"],"sourcesContent":["(ns shifting-sands.subs\n  (:require\n   [re-frame.core :as re-frame]\n   [shifting-sands.db :as db]))\n\n(re-frame/reg-sub\n ::name\n (fn [db]\n   (:name db)))\n\n(re-frame/reg-sub\n ::current-floor\n (fn [db]\n   (::db/current-floor db)))\n\n(re-frame/reg-sub\n ::notes\n (fn [{floor ::db/current-floor :as db} [_ coord]]\n   (get-in db [::db/floors floor ::db/map coord ::db/notes] \"\")))\n\n(re-frame/reg-sub\n ::exit-index\n (fn [db]\n   (get-in db [::db/floors (::db/current-floor db) ::db/exit-index])))\n\n(defn room->adjacent-unexplored\n  \"Returns a map of coord --> unexplored room for coords adjacent to the\n   given room\"\n  [coord room]\n  (->> (db/adjacent-coords coord room)\n       (map #(hash-map (second %)\n                       (assoc (::db/unexplored db/universal-rooms)\n                              ::db/hallways [(db/opposite-dir (first %))])))\n       (apply merge)))\n\n(defn merge-unexplored-rooms\n  [r1 r2]\n  (merge-with (fn [v1 v2] (if (coll? v1) (into [] (concat v1 v2)) v1)) r1 r2))\n\n(defn add-unexplored-rooms\n  [floor-map]\n  (merge (->> (map (partial apply room->adjacent-unexplored) floor-map)\n              (apply merge-with merge-unexplored-rooms))\n         floor-map))\n\n(defn add-empty-rooms\n  [floor-map]\n  (let [{:keys [max-x min-x max-y min-y]} (db/get-map-bounds floor-map)\n        ;; If I need to even out columns again in the future:\n        ;; x-range (max (db/abs max-x) (db/abs min-x))\n        ]\n    (merge\n     (apply merge (for [x (range min-x (inc max-x))\n                        y (range min-y (inc max-y))]\n                    {[x y] (::db/empty db/universal-rooms)}))\n     floor-map)))\n\n(re-frame/reg-sub\n ::floor-map\n (fn [{floor ::db/current-floor :as db}]\n   (let [floor-map (get-in db [::db/floors floor ::db/map])]\n     (-> (add-unexplored-rooms floor-map)\n         add-empty-rooms))))\n\n(re-frame/reg-sub\n ::room-list\n (fn [{floor ::db/current-floor :as db}]\n   (let [floor-map (get-in db [::db/floors floor ::db/map])]\n     (->> (vals floor-map)\n          (sort-by ::db/room-index)))))\n\n(re-frame/reg-sub\n ::modal-result\n (fn [db] (get db ::db/modal-result)))\n\n(re-frame/reg-sub\n ::slug-map\n (fn [db] (::db/slugs db)))\n\n(re-frame/reg-sub\n ::show-slugs\n (fn [db] (::db/show-slugs db)))\n\n(re-frame/reg-sub\n ::show-generate-dialog?\n (fn [db] (::db/show-generate-dialog db)))\n\n(re-frame/reg-sub\n ::re-pressed-example\n (fn [db _]\n   (:re-pressed-example db)))\n\n(re-frame/reg-sub\n ::generate-result\n (fn [db] (get db ::db/generate-result)))\n\n(re-frame/reg-sub\n ::show-reset-dialog?\n (fn [db] (get db ::db/show-reset-dialog?)))\n\n(re-frame/reg-sub\n ::history\n (fn [db] (reverse (get db ::db/history))))\n\n(re-frame/reg-sub\n ::show-history?\n (fn [db] (get db ::db/show-history?)))\n\n(re-frame/reg-sub\n ::room-adv\n (fn [db] (get db ::db/room-adv)))\n\n(re-frame/reg-sub\n ::showing-coord\n (fn [db _] (get db ::db/showing-coord)))\n\n(re-frame/reg-sub\n ::expanded-notes?\n (fn [db _] (get db ::db/expanded-notes?)))\n\n(re-frame/reg-sub\n ::current-room\n (fn [db _] (get db ::db/current-room)))\n\n(re-frame/reg-sub\n ::active-page\n (fn [db _] (get db ::db/active-page)))\n\n(re-frame/reg-sub\n ::new-character\n (fn [db _] (get db ::db/new-character)))\n"]}