{"version":3,"sources":["re_pressed/impl.cljs"],"mappings":";AASA,AAAA,AAAKA;AAEL,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAWL,AAAA,AAAMC,AAAcC;AAApB,AACE;;;AAAA,AAEG,AAAA,AAACC;;AACAC;AAHJ,AAIG,AAACC,AACA,AAAKP,AACAI,AACAE;;AAJLA;;;;;AAAAA;;;;;;;;;AAON,AAAA,AAAME,AACHC,AAAWC;AADd,AAEE,AAACC,AAAO,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AACE,AAACC,AAAE,AAACC,AAAIT,AAAWM,AAChBC;AACLN;;AAOV,AAAA,AAAMS,AAAef;AAArB,AACE,AAAMgB,AAAW,AAACjB,AAAaC;AAA/B,AACE,AAAAiB,AACC,AAAA,AAACD;AADFE,AAEC,AAAKE,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AAAOF,AAAI,AAACJ;;AAHhB,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAKD,AAAAI,AACC,AAAA,AAACP;AADFQ,AAEC,AAAKJ,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AAAOF,AAAI,AAACJ;;AAHhB,AAAA,AAAAO,AAAAC,AAAAD,AAAAC,AAACL,AAAAA,AAAAA;;AAKD,AAAAM,AACC,AAAA,AAACT;AADFU,AAEC,AAAKN,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AAAOF,AAAI,AAACJ;;AAHhB,AAAA,AAAAS,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;;AAKD,AAAAQ,AACC,AAAA,AAACX;AADFY,AAEC,AAAKR,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AAAOF,AAAI,AAACJ;;AAHhB,AAAA,AAAAW,AAAAC,AAAAD,AAAAC,AAACT,AAAAA,AAAAA;;AAKD,AAAM,AAAA,AAACN,AAAYb;AAAnB,AACE,AAAA6B,AACC,AAAA,AAACb;AADFc,AAEC,AAAKV,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AAAOF,AAAI,AAACJ;;AAHhB,AAAA,AAAAa,AAAAC,AAAAD,AAAAC,AAACX,AAAAA,AAAAA;;AADH;;;AAYJ,AAAA,AAAOY,AAAY/B;AAAnB,AACE,AAAMgB,AAAW,AAACjB,AAAaC;AAA/B,AACE,AAAAgC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAApB,AAAAoB,AAAA,AACWd;AADXkB,AAAAL;AAAA,AAAAvB,AAAA4B,AAAA,AAAA,AACiBjB;AADjB,AAAAX,AAAA4B,AAAA,AAAA,AACmBhC;AADnB,AAAA,AAAA,AAEO,AAAA,AAAA,AAACiC,AAAUnB,AAAI,AAACJ,AACL,AAAKwB;AAAL,AACE,AAAMC,AAAK,AAAInC,AACF,AAACoC,AAAK,AAAAC,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;AAEArC,AACNkC;AAJb,AAKEC;AACA,AAAA,AAACG,AACK,AAACC,AAAUhD,AAAW4C;;;;AAEtD,AAAA,AAAOK,AAAe9C;AAAtB,AACE,AAAMgB,AAAW,AAACjB,AAAaC;AAA/B,AACE,AAAA+C,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAA,AAAAnC,AAAAmC,AAAA,AACW7B;AADX8B,AAAAF;AAAA,AAAAtC,AAAAwC,AAAA,AAAA,AACiB7B;AADjB,AAAAX,AAAAwC,AAAA,AAAA,AACmB5C;AADnB,AAAA,AAAA,AAEO,AAAA,AAAA,AAAA,AAAC6C,AAAS/B,AAAI,AAACJ;;;AAI1B,AAAA,AAAAoC,AAAME,AACHjC;AADH,AAAA,AAAAgC,AAAAD;AAAA,AAAA1C,AAAA2C,AAAA,AAAA,AACMhC;AADN,AAAAX,AAAA2C,AAAA,AAAA,AACQE;AADR,AAEE,AAAM5C,AAAE,AAACR,AACA,AAAA,AAAKP;AADd,AAAA,AAEGe,AAAE4C;;AAGP,AAAA,AAAMC,AAAiBxD;AAAvB,AACE,AAAMgB,AAAW,AAACjB,AAAaC;AAA/B,AAEE,AAACyD,AAAiB,AAAA,AAACzC,AACD,AAACe,AAAW/B;;AAE9B,AAACyD,AAAgB,AAAA,AAACzC,AACD,AAAC8B,AAAc9C;;AAEhC,AAAM,AAAA,AAACa,AAAYb;AAAnB,AACE,AAACyD,AAAgB,AAAA,AAACzC,AACDsC;;AAFnB;;;AASJ,AAAA,AAAMI,AAAkB1D;AAAxB,AACE,AAAM,AAAA,AAACa,AAAYb;AAAnB,AACE,AAAA2D,AACC,AAACxD,AACA,AAAA,AAAKP;AAFPgE,AAGC,AAAKL;AAAL,AACE,AAAiBA;;AAJpB,AAAA,AAAAI,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AADH;;;AAQF,AAAAC,AACC,AAAC3D,AACA,AAAA,AAAKP;AAFPmE,AAIC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9B,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAC,AAAA4B,AAAAA;AAAA,AAAAnD,AAAAmD,AAAA,AAAajE;AAAb,AACE,AAACe,AAAcf;;AACf,AAACwD,AAAgBxD;;AACjB,AAAC0D,AAAiB1D;;AAElB,AAACkE,AACEC,AACAnE,AACA,AAAKuD;AAAL,AACE,AAAMvC,AAAW,AAACjB,AAAaC;AAEzBqE,AAAc,AAAWd;AACzBe,AAAc,AAACxE,AAAAA,AAAAA,AAAcuE,AAAAA;AAI7BE,AAAgB,AAAW,AAAUhB;AACrCiB,AAAgB,AAAA,AAAA,AAAA,AAAA,AAACC,AAGcF;AAXrC,AAAA,AAAA,AAAA,AAAA,AAAA,AAcMG,AAAmB,AAAUnB,AACV,AAAWA,AACX,AAAWA,AACX,AAAYA,AACZ,AAAWA;AAlBpC,AAAAa,AAoBMO,AAAoB,AAAAC,AAAA,AAAe,AAAA,AAAC5D;AAAhB,AAAA,AAAA4D,AAAAA,AAACC,AAAAA,AAAAA;;AACrBC,AAAmB,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAAC3E,AAAQsE;AAAWC;AArBpD,AAuBE,AAAM,AAAAhC,AAAI,AAAK,AAACsC,AAAIX,AACL,AAAKE;AADd,AAAA,AAAA7B;AAAAA;;AAEImC;;;AAFV,AAGE,AAAAI,AAAA,AAAmB,AAAA,AAAClE,AAAuB0D;AAA3C,AAAA,AAAAQ,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAAA,AAAAf,AAAMiB,AAAa,AAAAC,AAAA,AAAe,AAAA,AAACtE;AAAhB,AAAA,AAAAsE,AAAAA,AAACT,AAAAA,AAAAA;;AAApB,AAAAT,AACMmB,AAAa,AAAAC,AAAA,AAAe,AAAA,AAACxE;AAAhB,AAAA,AAAAwE,AAAAA,AAACX,AAAAA,AAAAA;;AADpB,AAAAT,AAEMqB,AAAa,AAAAC,AAAA,AAAe,AAAA,AAAC1E;AAAhB,AAAA,AAAA0E,AAAAA,AAACb,AAAAA,AAAAA;;AAEdxE,AAAW,AAACsF,AAAKN;AAEjBO,AAAiB,AAAKpD;AAAL,AACE,AAACjC,AAAOsF,AACA,AAAA,AAAAC,AAAAC,AAACC;AAAD,AACE,AAAAF,AAAAC,AAAC3F;AACF,AAAC6F,AAAO,AAACC,AAAQb,AACT,AAAA,AAACc,AAAOtG,AAChB,AAACqG,AAAQ1D;;AAErC4D,AAAa,AAACC,AACA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAowEmB,AAAAwC,AAAA7C;AApwEnBM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAAG,AAAA,AAAAV,AAAAQ;AAAAG,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAC,AAAOa;AAAPd,AACSe;AADT,AAAA,AAAA,AAAAX,AAAAT,AAEE,AAAMqB,AAAW,AAACpD,AAAKY,AAAiBuC;AAAxC,AACE,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAQH,AAAcE;;;AAH1B,AAAA,AAAAnB,AAAA;;;;AAAA;;;;;AAAA,AAAAQ,AAAA,AAAAC,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAArB;;AAAA,AAAAkB,AAAA,AAAAC,AAAAX,AAAA;;;AAAA,AAAAc,AAAA,AAAAP,AAAAf;AAAAuB,AAAA,AAAApB,AAAAmB;AAAAE,AAAA,AAAAT,AAAAQ;AAAAA,AAAA,AAAAP,AAAAO;AAAAC,AAAOG;AAAPJ,AACSK;AADT,AAAA,AAAAH,AAEE,AAAMI,AAAW,AAACpD,AAAKY,AAAiBuC;AAAxC,AACE,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAQH,AAAcE;AAH1B,AAAAT,AAAA,AAAAM,AAAA1B;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AACaf;;AAhBjCH,AAqBe,AAAAoD,AAASpC;AAAToC,AAAA,AAAA,AAAAA,AAAA,AAAA,AACS,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAO,AAAAD,AAACE;AAAjBH;AADT,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAESlB;;;AAvBxB,AAAA5G,AAAA0E,AAAA,AAAA,AAoBOkD;AApBP,AAAA5H,AAAA0E,AAAA,AAAA,AAqBOmD;AAIDK,AAAO,AAAC5D,AAAKY,AAAiBH;AAzBpC,AA0BE,AAAM,AAAA,AAAC5E,AAAYb;AAAnB,AACE,AAAA,AAAAoE,AAAMyE,AAAsB,AAAAC,AAAA,AAAe,AAAA,AAAC9H;AAAhB,AAAA,AAAA8H,AAAAA,AAACjE,AAAAA,AAAAA;;AACvBkE,AAAqB,AAAA,AAAAC,AAAChE;AAAD,AAAO,AAAAgE,AAAC5I,AAAQC;AAAcwI;AADzD,AAEE,AAAME;AAAN,AACE,AAAAE,AAAA,AAAmB,AAAA,AAACjI,AACDuC;AADnB,AAAA,AAAA0F,AAAAA,AAAC9D,AAAAA,AAAAA;;AADH;;AAHJ;;AAOA,AACEyD;AACA,AAAAM,AAAA,AAAmB,AAAA,AAAClI;AAApB,AAAA,AAAAkI,AAAAA,AAAC/D,AAAAA,AAAAA;;AAFH,AAIOoD;AACL,AAAAY,AAAkB,AAACzG,AAAK4F,AACA/E,AACA8B;AAFxB,AAAA,AAAA8D,AAAAA,AAAChE,AAAAA,AAAAA;;AALH,AAAA;;;;;AArCJ;;;;AApCV,AAAA,AAAArB,AAAAC,AAAAD,AAAAC,AAACF,AAAAA,AAAAA","names":["re-pressed.impl/ns-root","re-pressed.impl/max-record","re-pressed.impl/modifier-keys","re-pressed.impl/->ns-keyword","event-type","re_pressed$impl$__GT_ns_keyword_$_ns_keyword","suffix","cljs.core.keyword","re-pressed.impl/is-key?","recent-key","key-map","cljs.core/every?","p__60378","vec__60379","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core.get","re-pressed.impl/register-subs","ns-keyword","G__60383","G__60384","re-frame.core/reg-sub","db","_","cljs.core.get_in","G__60385","G__60386","G__60389","G__60390","G__60394","G__60395","G__60397","G__60398","re-pressed.impl/->set-key!","p__60402","p__60403","map__60404","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","vec__60405","cljs.core.update_in","key-maps","keys","cljs.core.conj","or__4126__auto__","cljs.core.into","cljs.core/take-last","re-pressed.impl/->clear-keys!","p__60414","p__60415","map__60416","vec__60417","cljs.core/assoc-in","p__60426","vec__60428","re-pressed.impl/prevent-default-keys!","e","re-pressed.impl/register-events","re_frame.core.reg_event_fx","re-pressed.impl/register-effects","G__60434","G__60435","re-frame.core/reg-fx","G__60444","G__60445","p__60446","map__60447","goog.events/listen","js/document","cljs.core/deref","e-key","modifier-key?","tag-name","entering-input?","cljs.core/contains?","hit-key","always-listen-keys","G__60454","re-frame.core/subscribe","always-listen?","p1__60439#","cljs.core/some","cljs.core/not","G__60456","re-frame.core/dispatch-sync","vec__60458","recent-keys","G__60461","event-keys","G__60462","clear-keys","G__60463","cljs.core/last","is-key-sequence?","cljs.core/true?","p1__60440#","p2__60441#","cljs.core.mapv","cljs.core.concat","cljs.core/reverse","cljs.core.repeat","check-events","cljs.core.doall","iter__4529__auto__","s__60465","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__60467","cljs.core/chunk-buffer","i__60466","vec__60470","cljs.core/-nth","seq__60471","first__60472","cljs.core/first","cljs.core/next","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60464","cljs.core/chunk-rest","vec__60473","seq__60474","first__60475","cljs.core/cons","cljs.core/rest","trigger-event","ks","triggered?","cljs.core/PersistentVector","triggered-event","event?","G__60477","p1__60442#","cljs.core.filter","cljs.core/second","clear?","prevent-default-keys","G__60482","prevent-default?","p1__60443#","G__60483","G__60484","G__60485","cljs.core/chunk-first"],"sourcesContent":["(ns re-pressed.impl\n  (:require\n   [re-frame.core :as rf]\n   [goog.events :as ev]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vars\n\n(def ns-root \"re-pressed.core/\")\n\n(def max-record 25)\n\n(def modifier-keys #{16 ;; shift\n                     17 ;; ctrl\n                     18 ;; alt\n                     91 ;; windows (i.e. meta) ... TODO: apple key?\n                     })\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Util\n\n(defn ->ns-keyword [event-type]\n  (fn ns-keyword\n    ([]\n     (ns-keyword nil))\n    ([suffix]\n     (keyword\n      (str ns-root\n           event-type\n           suffix)))))\n\n\n(defn is-key?\n  [recent-key key-map]\n  (every? (fn [[k v]]\n            (= (get recent-key k)\n               v))\n          key-map))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Subs\n\n(defn register-subs [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (rf/reg-sub\n     (ns-keyword \"-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-event-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :event-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-clear-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :clear-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-always-listen-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :always-listen-keys])))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-sub\n       (ns-keyword \"-prevent-default-keys\")\n       (fn [db _]\n         (get-in db [(ns-keyword) :prevent-default-keys]))))\n    ))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Events\n\n(defn- ->set-key! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn set-key!\n      [{:keys [db]} [_ key-map]]\n      {:db (update-in db [(ns-keyword) :keys]\n                      (fn [key-maps]\n                        (let [keys (if key-map\n                                     (conj (or key-maps\n                                               [])\n                                           key-map)\n                                     key-maps)]\n                          keys\n                          (into []\n                                (take-last max-record keys)))))})))\n\n(defn- ->clear-keys! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn clear-keys!\n      [{:keys [db]} [_ key-map]]\n      {:db (assoc-in db [(ns-keyword)\n                         :keys] [])})))\n\n\n(defn prevent-default-keys!\n  [_ [_ e]]\n  (let [k (keyword\n           (str ns-root \"prevent-default\"))]\n    {k e}))\n\n\n(defn register-events [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n\n    (rf/reg-event-fx  (ns-keyword \"-set-key\")\n                      (->set-key! event-type))\n\n    (rf/reg-event-fx (ns-keyword \"-clear-keys\")\n                     (->clear-keys! event-type))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-event-fx (ns-keyword \"-prevent-default-keys\")\n                       prevent-default-keys!))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Effects\n\n(defn register-effects [event-type]\n  (when (= \"keydown\" event-type)\n    (rf/reg-fx\n     (keyword\n      (str ns-root \"prevent-default\"))\n     (fn [e]\n       (.preventDefault e)))))\n\n\n(rf/reg-fx\n (keyword\n  (str ns-root \"keyboard-event\"))\n\n (fn [{:keys [event-type]}]\n   (register-subs event-type)\n   (register-events event-type)\n   (register-effects event-type)\n\n   (ev/listen\n      js/document\n      event-type\n      (fn [e]\n        (let [ns-keyword (->ns-keyword event-type)\n\n              e-key         (.-keyCode e)\n              modifier-key? (modifier-keys e-key)\n\n              ;; --\n              ;; thanks re-frame-10x for this snippet\n              tag-name        (.-tagName (.-target e))\n              entering-input? (contains?\n                               #{\"INPUT\"\n                                 \"SELECT\"\n                                 \"TEXTAREA\"} tag-name)\n              ;; --\n\n              hit-key {:altKey   (.-altKey e)\n                       :ctrlKey  (.-ctrlKey e)\n                       :metaKey  (.-metaKey e)\n                       :shiftKey (.-shiftKey e)\n                       :keyCode  (.-keyCode e)}\n\n              always-listen-keys @(rf/subscribe [(ns-keyword \"-always-listen-keys\")])\n              always-listen?     (some #(is-key? hit-key %) always-listen-keys)]\n\n          (when (or (and (not modifier-key?)\n                         (not entering-input?))\n                    always-listen?)\n            (rf/dispatch-sync [(ns-keyword \"-set-key\") hit-key])\n            (let [recent-keys @(rf/subscribe [(ns-keyword \"-keys\")])\n                  event-keys  @(rf/subscribe [(ns-keyword \"-event-keys\")])\n                  clear-keys  @(rf/subscribe [(ns-keyword \"-clear-keys\")])\n\n                  recent-key (last recent-keys)\n\n                  is-key-sequence? (fn [key-maps]\n                                     (every? true?\n                                             (mapv\n                                              #(is-key? %1 %2)\n                                              (concat (reverse recent-keys)\n                                                      (repeat max-record {}))\n                                              (reverse key-maps))))\n\n                  check-events (doall\n                                (for [[trigger-event\n                                       & ks] event-keys]\n                                  (let [triggered? (some is-key-sequence? ks)]\n                                    (vector trigger-event triggered?))))\n\n                  [triggered-event\n                   event?] (some->> check-events\n                                    (filter #(true? (second %)))\n                                    first)\n\n                  clear? (some is-key-sequence? clear-keys)]\n              (when (= \"keydown\" event-type)\n                (let [prevent-default-keys @(rf/subscribe [(ns-keyword \"-prevent-default-keys\")])\n                      prevent-default?     (some #(is-key? recent-key %) prevent-default-keys)]\n                  (when prevent-default?\n                    (rf/dispatch-sync [(ns-keyword \"-prevent-default-keys\")\n                                       e]))))\n\n              (cond\n                clear?\n                (rf/dispatch-sync [(ns-keyword \"-clear-keys\")])\n\n                (and event?)\n                (rf/dispatch-sync (conj triggered-event\n                                        e\n                                        recent-keys))\n\n                :else nil))))))))\n"]}