{"version":3,"sources":["re_pressed/core.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__60499","vec__60502","cljs.core.nth","_","event-type","p__60507","p__60508","map__60509","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__60510","map__60513","db","event-keys","clear-keys","always-listen-keys","prevent-default-keys","opts","cljs.core/assoc-in","p__60521","p__60522","map__60523","vec__60524","map__60527","p__60531","p__60532","map__60533","vec__60534","map__60537"],"sourcesContent":["(ns re-pressed.core\n  (:require\n   [re-frame.core :as rf]\n   [re-pressed.impl]\n   ))\n\n\n\n(rf/reg-event-fx\n ::add-keyboard-event-listener\n ;; event-type can be:\n ;; \"keydown\",\n ;; \"keypress\", or\n ;; \"keyup\"\n (fn [_ [_ event-type]]\n   {::keyboard-event {:event-type event-type}}))\n\n\n(rf/reg-event-fx\n ::set-keydown-rules\n (fn [{:keys [db]}\n      [_ {:keys [event-keys\n                 clear-keys\n                 always-listen-keys\n                 prevent-default-keys]\n          :as   opts}]]\n   {:db (-> db\n            (assoc-in [::keydown :keys] nil)\n            (assoc-in [::keydown :event-keys] event-keys)\n            (assoc-in [::keydown :clear-keys] clear-keys)\n            (assoc-in [::keydown :always-listen-keys] always-listen-keys)\n            (assoc-in [::keydown :prevent-default-keys] prevent-default-keys)\n            )}))\n\n\n(rf/reg-event-fx\n ::set-keypress-rules\n (fn [{:keys [db]}\n      [_ {:keys [event-keys\n                 clear-keys\n                 always-listen-keys]\n          :as   opts}]]\n   {:db (-> db\n            (assoc-in [::keypress :keys] nil)\n            (assoc-in [::keypress :event-keys] event-keys)\n            (assoc-in [::keypress :clear-keys] clear-keys)\n            (assoc-in [::keypress :always-listen-keys] always-listen-keys)\n            )}))\n\n\n(rf/reg-event-fx\n ::set-keyup-rules\n (fn [{:keys [db]}\n      [_ {:keys [event-keys\n                 clear-keys\n                 always-listen-keys]\n          :as   opts}]]\n   {:db (-> db\n            (assoc-in [::keyup :keys] nil)\n            (assoc-in [::keyup :event-keys] event-keys)\n            (assoc-in [::keyup :clear-keys] clear-keys)\n            (assoc-in [::keyup :always-listen-keys] always-listen-keys)\n            )}))\n"]}