{"version":3,"sources":["kee_frame/fsm/alpha.cljc"],"mappings":"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","names":["kee-frame.fsm.alpha/reg-no-op","id","re_frame.core.reg_event_fx","kee-frame.interceptors/add-global-interceptors","cljs.core/constantly","kee-frame.fsm.alpha/find-transition","transitions","event","cljs.core/seq","cljs.core.get","G__50508","G__50509","cljs.core/butlast","kee-frame.fsm.alpha/event-transition!","temp__5735__auto__","transition","map__50510","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","next-state","dispatch","seq__50512","chunk__50513","count__50514","i__50515","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","e","re-frame.core/dispatch","p__50517","vec__50518","cljs.core.nth","kee-frame.fsm.alpha/foreign-event?","fsm-id","event-id","_","event-fsm-id","and__4115__auto__","fexpr__50523","cljs.core.not_EQ_","kee-frame.fsm.alpha/next-state","fsm","db","map__50524","state-attr","start","transition-map","current-state","cljs.core.get_in","kee-frame.fsm.alpha/compile-timeouts","cljs.core.map","p__50527","vec__50528","state","cljs.core.filter","p__50538","vec__50540","vec__50543","fexpr__50546","cljs.core.mapv","p__50531","vec__50532","vec__50535","timeout","or__4126__auto__","cljs.core.into","kee-frame.fsm.alpha/clear-timeouts!","timeouts*","seq__50547","cljs.core/deref","chunk__50548","count__50549","i__50550","t","kee-frame.interop/clear-timeout","cljs.core/reset!","kee-frame.fsm.alpha/dispatch-timeouts!","timeouts","p__50552","map__50553","ms","kee-frame.interop/set-timeout","kee-frame.fsm.alpha/state-changed?","prev","next","cljs.core/not","kee-frame.fsm.alpha/advance","state->timeouts","map__50559","stop","G__50561","cljs.core._EQ_","G__50562","cljs.core/assoc-in","G__50563","G__50564","re-frame.core/reg-fx","p__50565","map__50566","cljs.core.atom","cljs.core.partial","re-frame.core/enrich","G__50569","kee-frame.interceptors/reg-global-interceptor","G__50574","G__50575","p__50576","map__50577","kee-frame.interceptors/clear-global-interceptor","p__50579","vec__50580","p__50583","vec__50584","G__50587","G__50588","re-frame.core/reg-sub","p__50589","vec__50590","map__50593","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","cljs.core/vector?","cljs.spec.alpha/cat-impl","cljs.core/symbol?","cljs.core/any?","js/kee-frame","js/kee-frame.fsm","js/kee-frame.fsm.alpha","js/kee-frame.fsm.alpha.step","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__50600","cljs.core/MultiFn","cljs.core.symbol","kee-frame.fsm.alpha/step","G__50601","re-frame.core/subscribe","G__50603","kee-frame.fsm.alpha/render*","args","with-let50604","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__45762__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init50605","res__45763__auto__","destroy__45761__auto__","reagent.ratom/reactive?","G__50611","cljs.core/apply","G__50612","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","kee-frame.fsm.alpha/render","seq50615","G__50616","self__4723__auto__","fsm-fn"],"sourcesContent":["(ns kee-frame.fsm.alpha\n  (:require [clojure.spec.alpha :as s]\n            [re-frame.core :as f]\n            [kee-frame.interop :as interop]\n            [kee-frame.interceptors :as i]\n            #?(:cljs [reagent.core :as r])))\n\n(defn reg-no-op\n  \"Convenience function for declaring no-op events.\"\n  [id]\n  (f/reg-event-fx id\n                  [i/add-global-interceptors]\n                  (constantly nil)))\n\n(defn find-transition\n  \"Try to find a transition that matches some subset of the received event\"\n  [transitions event]\n  (when (seq event)\n    (get transitions event\n         (find-transition transitions (butlast event)))))\n\n(defn- event-transition!\n  \"Given a transition map and an event, returns the next fsm state if\n  there is a valid transition, `nil` otherwise. Event transition\n  `:when` clause is optionally applied.\"\n  [transitions event]\n  (when-let [transition (find-transition transitions event)]\n    (let [{next-state :to\n           dispatch   :dispatch} transition]\n      (when dispatch\n        (doseq [e dispatch]\n          (f/dispatch e)))\n      next-state)))\n\n(defn foreign-event? [fsm-id [event-id _ event-fsm-id]]\n  (and (#{::on-enter ::timeout} event-id)\n       (not= fsm-id event-fsm-id)))\n\n(defn next-state\n  \"Returns next state if there is a valid transition, `nil` otherwise.\"\n  [fsm db event]\n  (let [{id  :id state-attr :state-attr start :start transition-map :fsm\n         :or {state-attr ::state}} fsm\n        current-state (get-in db [id state-attr] start)\n        transitions   (get transition-map current-state)]\n    (when-not (foreign-event? id event)\n      (event-transition! transitions event))))\n\n;;;;;;;;;;;; Timeout implementation ;;;;;;;;;;;;;;;;;;;\n\n(reg-no-op ::timeout)\n(reg-no-op ::on-enter)\n(reg-no-op ::fsm-started)\n\n\n(reg-no-op :default-on-failure)\n\n(defn compile-timeouts [fsm]\n  (->> fsm\n       :fsm\n       (map (fn [[state transitions]]\n              [state (->> transitions\n                          (filter (fn [[[event-id]] _]\n                                    (#{::timeout ::on-enter} event-id)))\n                          (mapv (fn [[[event-id timeout]] _]\n                                  (let [timeout (or timeout 0)]\n                                    {:ms timeout :dispatch [event-id timeout (:id fsm)]}))))]))\n       (into {})))\n\n(defn clear-timeouts! [timeouts*]\n  (doseq [t @timeouts*]\n    (interop/clear-timeout t))\n  (reset! timeouts* []))\n\n(defn dispatch-timeouts! [timeouts* timeouts]\n  (->> timeouts\n       (mapv (fn [{:keys [ms dispatch]}]\n               (interop/set-timeout #(f/dispatch dispatch) ms)))\n       (reset! timeouts*)))\n\n(defn state-changed? [prev next]\n  (or\n   (not prev)\n   next))\n\n(defn advance\n  \"Given a parsed fsm, a db, and an event, advances the fsm. Else,\n  no-op.\"\n  [fsm timeouts* state->timeouts db event]\n  (let [{:keys [id state-attr stop start] :or {state-attr ::state}} fsm\n        current-state (get-in db [id state-attr])\n        next-state    (next-state fsm db event)]\n    (when (state-changed? current-state next-state)\n      (clear-timeouts! timeouts*)\n      (dispatch-timeouts! timeouts* (state->timeouts (or next-state start))))\n    (when (and stop (= next-state stop))\n      (f/dispatch [::stop fsm]))\n    (assoc-in db [id state-attr] (or next-state current-state start))))\n\n\n(f/reg-fx ::start\n          (fn [{:keys [id] :as fsm}]\n            (let [timeouts*       (atom nil)\n                  state->timeouts (compile-timeouts fsm)]\n              (->> (partial advance fsm timeouts* state->timeouts)\n                   f/enrich\n                   (i/reg-global-interceptor id)))))\n\n(f/reg-fx ::stop\n          (fn [{:keys [id]}]\n            (when id\n              (i/clear-global-interceptor id))))\n\n(f/reg-event-fx ::start\n                ;; Starts the interceptor for the given fsm.\n  (fn [_ [_ fsm]]\n    {::start   fsm\n     :dispatch [::fsm-started]}))\n\n(f/reg-event-fx ::stop\n  ;; Stops the interceptor for the given fsm.\n  (fn [_ [_ fsm]]\n    {::stop fsm}))\n\n(f/reg-sub ::state\n  (fn [db [_ {:keys [id state-attr start]\n              :or   {state-attr ::state}}]]\n    (get-in db [id state-attr] start)))\n\n(s/def ::binding (s/and vector?\n                        (s/cat :fsm-symbol symbol? :fsm any?)))\n\n(defmacro with-fsm [binding & body]\n  (let [parsed (s/conform ::binding binding)]\n    (when (= ::s/invalid parsed)\n      (throw (ex-info \"with-fsm accepts exactly one binding pair, the symbol and the value containing the fsm.\"\n                      (s/explain-data ::binding binding))))\n    (let [{:keys [:fsm-symbol :fsm]} parsed]\n      `(reagent.core/with-let [~fsm-symbol ~fsm\n                               _# (f/dispatch [::start ~fsm-symbol])]\n         ~@body\n         ~(list\n           'finally\n           `(re-frame.core/dispatch [::stop ~fsm-symbol]))))))\n\n(defmulti step\n  \"Materialized view of the current fsm state. A `step` method must\n  exist for each state defined in the fsm transition map. States are\n  globally defined, and namespaced keywords are required. It is a good\n  idea to define the fsm in the same namespace as the steps.\"\n  (fn [fsm & _]\n    @(f/subscribe [::state fsm])))\n\n(defmethod step :default\n  [fsm & _]\n  [:h2 (str \"Undefined step: \" @(f/subscribe [::state fsm]))])\n\n#?(:cljs\n   (defn- render*\n     [fsm args]\n     (r/with-let [_ (f/dispatch [::start fsm])]\n       [apply step fsm args]\n       (finally\n        (f/dispatch [::stop fsm])))))\n\n#?(:cljs\n   (defn render\n     \"Given an fsm function and arguments, renders a materialized view of\n     the fsm state. A `step` method must exist for each state defined in\n     the fsm transition map. The args passed to `render` must match the\n     args expected by the fsm's `step` methods.\"\n     [fsm-fn & args]\n     (let [fsm (apply fsm-fn args)]\n       ^{:key (:id fsm)} [render* fsm args])))"]}