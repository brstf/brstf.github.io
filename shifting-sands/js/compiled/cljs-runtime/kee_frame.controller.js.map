{"version":3,"sources":["kee_frame/controller.cljc"],"mappings":"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","names":["kee-frame.controller/process-params","params","route","cljs.core/vector?","cljs.core.get_in","cljs.core/ifn?","kee-frame.controller/validate-and-dispatch!","dispatch","cljs.core/map?","G__52186","re-frame.core/dispatch","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.core.ex_info","cljs.spec.alpha/explain-data","kee-frame.controller/debug-enabled?","map__52187","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","controllers?","kee-frame.state/debug-config","and__4115__auto__","kee-frame.state/debug?","kee-frame.controller/start!","id","ctx","start","re-frame.core/console","G__52189","cljs.core.conj","kee-frame.controller/stop!","stop","p__52191","map__52192","kee-frame.controller/process-controller","last-params","current-params","ocr-52194","cljs.core.match/backtrack","e52204","js/Error","e__49598__auto__","e52206","e52208","e52205","cljs.core._EQ_","kee-frame.controller/apply-route","controllers","cljs.core.map","p__52209","vec__52210","cljs.core.nth","controller","cljs.core.assoc","cljs.core.into"],"sourcesContent":["(ns ^:no-doc kee-frame.controller\n  (:require\n   [re-frame.core :as rf]\n   #?(:cljs\n      [cljs.core.match :refer [match]])\n   #?(:clj\n      [clojure.core.match :refer [match]])\n   [kee-frame.state :as state]\n   [kee-frame.spec :as spec]\n   [kee-frame.fsm.alpha :as fsm]\n   [clojure.spec.alpha :as s]\n   [expound.alpha :as e]))\n\n(defn process-params [params route]\n  (cond\n    (vector? params) (get-in route params)\n    (ifn? params) (params route)))\n\n(defn validate-and-dispatch! [dispatch]\n  (when dispatch\n    (if (map? dispatch)\n      (rf/dispatch [::fsm/start dispatch])\n      (do\n        (when-not (s/valid? ::spec/event-vector dispatch)\n          (e/expound ::spec/event-vector dispatch)\n          (throw (ex-info \"Invalid dispatch value\"\n                          (s/explain-data ::spec/event-vector dispatch))))\n        (rf/dispatch dispatch)))))\n\n(defn debug-enabled? []\n  (let [{:keys [controllers?]\n         :or   {controllers? true}} @state/debug-config]\n    (and @state/debug?\n         controllers?)))\n\n(defn start! [id ctx start params]\n  (when start\n    (when (debug-enabled?)\n      (rf/console :log \"Starting controller \" id \" with params \" params))\n    (cond\n      (vector? start) (rf/dispatch (conj start params))\n      (ifn? start) (validate-and-dispatch! (start ctx params)))))\n\n(defn stop! [id ctx stop]\n  (when stop\n    (when (debug-enabled?)\n      (rf/console :log \"Stopping controller \" id))\n    (cond\n      (vector? stop) (rf/dispatch stop)\n      (ifn? stop) (validate-and-dispatch! (stop ctx)))))\n\n(defn process-controller [id {:keys [last-params params start stop]} ctx route]\n  (let [current-params (process-params params route)]\n    (match [last-params current-params (= last-params current-params)]\n           [_ _ true] nil\n           [nil _ false] (start! id ctx start current-params)\n           [_ nil false] (stop! id ctx stop)\n           [_ _ false] (do (stop! id ctx stop)\n                           (start! id ctx start current-params)))\n    current-params))\n\n(defn apply-route [controllers ctx route]\n  (->> controllers\n       (map (fn [[id controller]]\n              [id (assoc controller :last-params (process-controller id controller ctx route))]))\n       (into {})))"]}