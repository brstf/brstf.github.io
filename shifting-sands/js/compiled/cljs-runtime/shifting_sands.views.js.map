{"version":3,"sources":["shifting_sands/views.cljs"],"mappings":"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","names":["shifting-sands.views/aqua-green","shifting-sands.views/text->hiccup","text","clojure.string.split","cljs.core.interpose","p1__66026#","cljs.core.map","cljs.core/with-meta","cljs.core.gensym","shifting-sands.views/capitalize-first","s","cljs.core.juxt","cljs.core.comp","clojure.string/upper-case","cljs.core/first","clojure.string/join","cljs.core/rest","cljs.core.apply","cljs.core/str","shifting-sands.views/keyword->display-str","k","cljs.core/name","clojure.string.join","shifting-sands.views/title","name","G__66027","re-frame.core/subscribe","re-com.core/title","cljs.core/deref","shifting-sands.views/floors","cljs.core.sort","cljs.core/second","shifting-sands.db/floor->depth","f","cljs.core.into","shifting-sands.views/floor-header","p1__66028#","current-floor","G__66029","re-com.core/single-dropdown","G__66030","re-frame.core/dispatch","shifting-sands.views/exit-index-label","exit-index","G__66031","p__66032","map__66033","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","shifting-sands.views/room->hiccup","ri","n","d","r","re-com.core/info-button","shifting-sands.views/room-list","room-list","G__66035","re-com.core/scroller","iter__4529__auto__","s__66037","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__66039","cljs.core/chunk-buffer","i__66038","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66036","cljs.core/chunk-rest","cljs.core/cons","room","shifting-sands.views/adv->str","cljs.core.partial","shifting-sands.db/adv->str","shifting-sands.views/room-adv","room-adv","G__66040","re-com.core/h-box","re-com.core/v-box","re-com.core/md-icon-button","G__66041","cljs.core/inc","G__66042","cljs.core/dec","shifting-sands.views/sidebar","re-com.core/line","shifting-sands.views/explore-button","coord","dir","G__66043","p__66044","map__66045","shifting-sands.views/unexplored-room","h","s__66048","b__66050","i__66049","iter__66047","shifting-sands.views/regenerate-button","from-dir","G__66051","shifting-sands.views/encounter-button","room-map","G__66052","shifting-sands.views/rotate-button","G__66053","re-com.core/gap","G__66054","cljs.core/Keyword","js/Error","shifting-sands.views/force-shop-button","G__66055","shifting-sands.views/force-shrine-button","G__66056","shifting-sands.views/expandable","label","component","expanded?","G__66057","G__66058","re-com.core/box","shifting-sands.views/room-notes","p1__66059#","notes","G__66060","re-com.core/input-textarea","G__66061","shifting-sands.views/room-menu","showing-coord","G__66062","showing?","reagent.ratom/make-reaction","cljs.core._EQ_","re-com.core/popover-anchor-wrapper","G__66063","G__66064","re-com.core/popover-content-wrapper","G__66065","shifting-sands.views/room-cell","G__66066","current-room","G__66067","G__66068","goog.string/format","shifting-sands.views/hallway","secret?","cljs.core.merge","G__66069","shifting-sands.views/explored-room","cljs.core.concat","s__66071","b__66073","i__66072","iter__66070","s__66075","b__66077","i__66076","iter__66074","sh","shifting-sands.views/room-panel","floor-map","G__66078","shifting-sands.views/map-column","column-index","map__66079","max-y","shifting-sands.db/get-map-bounds","s__66082","b__66084","i__66083","iter__66081","y","cljs.core.range","shifting-sands.views/map-panel","map__66085","G__66086","max-x","min-x","s__66089","b__66091","i__66090","iter__66088","x","shifting-sands.views/loot-button","G__66092","shifting-sands.views/slugs-button","G__66093","shifting-sands.views/slugs-header","p__66094","vec__66095","cljs.core.nth","shifting-sands.views/slug-row","idx","color","effect","cljs.core/even?","shifting-sands.views/slug-table","show-slugs","G__66098","slug-map","G__66099","re-com.core/modal-panel","G__66100","s__66102","b__66104","i__66103","vec__66105","iter__66101","vec__66108","slug-mapping","cljs.core/zipmap","shifting-sands.views/generate-button","G__66111","shifting-sands.views/history-button","G__66112","shifting-sands.views/reset-button","G__66113","shifting-sands.views/new-character-button","shifting-sands.router/url-for","shifting-sands.views/button-overlay","reagent.core.atom","cljs.core.swap_BANG_","cljs.core/not","shifting-sands.views/right-panel","shifting-sands.views/generate-options","shifting_sands.db.get_table_names","cljs.core.map_indexed","p","shifting-sands.views/adv-map","p__66114","map__66115","shifting-sands.views/generate->hiccup","roll","description","shifting-sands.views/generate-dialog","generate-choice","advantage-choice","p1__66117#","p1__66118#","disable-button?","generate-result","G__66119","cljs.core/reset!","re-com.core/label","re-com.core/button","G__66120","shifting-sands.views/reset-dialog","show-reset-dialog?","G__66122","reset-slugs?","p1__66121#","G__66123","re-com.core/checkbox","G__66124","shifting-sands.views/history-dialog","history","G__66125","show-history?","G__66126","formatter","cljs_time.format.formatter","G__66127","s__66129","b__66131","i__66130","vec__66132","map__66135","iter__66128","vec__66137","map__66140","room-index","floor","time","cljs.core/vec","cljs.core/list","cljs-time.format/unparse-local-date","cljs-time.core/to-default-time-zone","shifting-sands.views/shifting-sands-panel","modal-result","G__66142","show-generate?","G__66143","G__66145","G__66146","G__66147","fexpr__66144","G__66148","G__66149","G__66150","shifting-sands.views/starting-character-keys","shifting-sands.db/character-traits","shifting-sands.db/starting-equipment","shifting-sands.views/character-row","even?","character","shifting-sands.views/new-character-panel","G__66151","G__66152","s__66154","b__66156","i__66155","vec__66157","iter__66153","vec__66160","trait","cljs.core/vector","shifting-sands.views/not-found-panel","shifting-sands.views/pages","page-name","G__66163","shifting-sands.views/main-panel","active-page","G__66164","cljs.core/chunk-first"],"sourcesContent":["(ns shifting-sands.views\n  (:require\n   [clojure.string :as string]\n   [reagent.core :as reagent]\n   [re-frame.core :as re-frame]\n   [re-com.core :as re-com]\n   [shifting-sands.events :as events]\n   [shifting-sands.router :as router]\n   [shifting-sands.subs :as subs]\n   [shifting-sands.db :as db]\n   [cljs-time.core :as time]\n   [cljs-time.format :as time-format]\n   [goog.string :as gstring]\n   [goog.string.format])\n  (:require-macros [reagent.ratom :refer [reaction]]))\n\n(def aqua-green \"#84c7a8\")\n\n(defn text->hiccup\n  \"Convert newlines to [:br]'s.\"\n  [text]\n  (->> (string/split text \"\\n\")\n       (interpose [:br])\n       (map #(if (string? %)\n               %\n               (with-meta % {:key (gensym \"br-\")})))))\n\n(defn capitalize-first [s]\n  (->> ((juxt (comp string/upper-case first)\n              (comp string/join rest)) s)\n       (apply str)))\n\n(defn keyword->display-str [k]\n  (->> (string/split (name k) #\"-\")\n       (map capitalize-first)\n       (string/join \" \")))\n\n(defn title []\n  (let [name (re-frame/subscribe [::subs/name])]\n    [re-com/title\n     :label (str \"Hello from \" @name)\n     :level :level1]))\n\n(def floors\n  (->> (sort second db/floor->depth)\n       (map first)\n       (map (fn [f] {:id f :label (->> (string/split (name f) #\"-\")\n                                       (map capitalize-first)\n                                       (string/join \" \"))}))\n       (into [])))\n\n(defn floor-header []\n  (let [current-floor (re-frame/subscribe [::subs/current-floor])]\n    [re-com/single-dropdown\n     :choices floors\n     :model current-floor\n     :width \"100%\"\n     :on-change #(re-frame/dispatch [::events/change-floor %])\n     :class \"mono floor-header\"]))\n\n(defn exit-index-label []\n  (let [exit-index (re-frame/subscribe [::subs/exit-index])]\n    [:p {:class \"exit-index\"} [:b (str \"Exit Index: \" @exit-index)]]))\n\n(defn room->hiccup\n  [{ri ::db/room-index n ::db/name d ::db/description\n    s ::db/situation r ::db/roll}]\n  [:div\n   [:p {:style {:display \"inline\"}} [:b (str ri \". \")]\n    (str (if (nil? s) \"\" (str \"(\" r \"/\" (::db/roll s) \") \")) n)]\n   (when d [re-com/info-button\n            :info [:span (text->hiccup d)]\n            :style {:display \"inline\"}\n            :position :right-below\n            :width \"250px\"])     \n   [:p {:style {:display \"inline\"}}\n    (if (nil? s) \"\" (str \" + \" (::db/name s)))]\n   (when (::db/description s)\n     [re-com/info-button\n      :info [:span (text->hiccup (::db/description s))]\n      :style {:display \"inline\"}\n      :position :right-below\n      :width \"250px\"])])\n\n(defn room-list []\n  (let [room-list (re-frame/subscribe [::subs/room-list])]\n    [re-com/scroller\n     :style {:flex \"1\"}\n     :child [:ul\n             (for [room @room-list]\n               ^{:key (::db/room-index room)}\n               [:li (room->hiccup room)])]]))\n\n(def adv->str (partial db/adv->str \"None\"))\n\n(defn room-adv []\n  (let [room-adv (re-frame/subscribe [::subs/room-adv])]\n    [re-com/h-box\n     :class \"room-adv-overlay\"\n     :children\n     [[:p {:style {:flex \"1\" :align-self \"center\"}\n           :class \"mono\"}\n       \"Generate room\" [:br] \"advantage:\"]\n      [re-com/v-box\n       :style {:align-self \"center\"}\n       :children [[re-com/md-icon-button\n                   :md-icon-name \"zmdi-triangle-up\"\n                   :size :smaller\n                   :on-click #(re-frame/dispatch\n                               [::events/update-room-adv inc])]\n                  [re-com/md-icon-button\n                   :md-icon-name \"zmdi-triangle-down\"\n                   :size :smaller\n                   :on-click #(re-frame/dispatch\n                               [::events/update-room-adv dec])]]]\n      [:p\n       {:class \"mono\"\n        :style {:text-align \"center\"\n                :align-self \"center\"\n                :width \"60px\"}}\n       (adv->str @room-adv)]]]))\n\n(defn sidebar []\n  [re-com/v-box\n   :children [[floor-header]\n              [exit-index-label]\n              [re-com/line :color aqua-green]\n              [room-list]\n              [re-com/line :color aqua-green]\n              [room-adv]]\n   :class \"sidebar\"])\n\n(defn explore-button\n  [coord dir]\n  [:div [:p {:class (str \"mono unselectable explore-qm explore-\" (name dir))}\n         \"?\"]\n   [:div {:class (str \"explore-button explore-button-\" (name dir))\n          :on-click #(re-frame/dispatch\n                      [::events/generate-room coord dir])}]])\n\n(defn unexplored-room\n  [coord {h ::db/hallways}]\n  [:div {:class \"tile\"}\n   [:div {:class \"explore-container\"}\n    (for [dir h]\n      ^{:key (str coord dir)}\n      [explore-button coord dir])]])\n\n(defn regenerate-button [coord from-dir]\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/regenerate-room coord from-dir])}\n   \"Regenerate\"])\n\n(defn encounter-button [coord room-map]\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/generate-encounter])}\n   \"Encounter\"])\n\n(defn rotate-button [coord dir]\n  [:div\n   {:class \"menu-button\"\n    :style {:display \"flex\"\n            :align-items \"center\"\n            :justify-content \"center\"\n            :flex-direction \"row\"}\n    :on-click #(re-frame/dispatch [::events/rotate-room coord dir])}\n   [:p {:style {:align-self \"center\"\n                :margin \"0\"}}  \"Rotate\"]\n   [re-com/gap :size \"1\"]\n   [re-com/md-icon-button\n    :style {:align-self \"center\"}\n    :disabled? true\n    :md-icon-name (case dir ::db/cw \"zmdi-rotate-cw\"\n                        ::db/ccw \"zmdi-rotate-ccw\")]])\n\n(defn force-shop-button [coord]\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/force-shop coord])}\n   \"Force Shop\"])\n\n(defn force-shrine-button [coord]\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/force-shrine coord])}\n   \"Force Shrine\"])\n\n(defn expandable [label component]\n  (let [expanded? (re-frame/subscribe [::subs/expanded-notes?])]\n    [re-com/v-box\n     :width \"100%\"\n     :children\n     [[:div {:class \"menu-button\"\n             :on-click #(re-frame/dispatch [::events/toggle-expanded-notes])\n             :style {:display \"flex\"\n                     :align-items \"center\"\n                     :justify-content \"center\"\n                     :flex-direction \"row\"}}\n       [:p {:style {:align-self \"center\" :margin \"0\"}} label]\n       [re-com/md-icon-button\n        :style {:align-self \"center\"}\n        :size :larger\n        :md-icon-name (if @expanded?\n                        \"zmdi-chevron-down\"\n                        \"zmdi-chevron-right\")\n        :disabled? true]]\n      [re-com/box\n       :class \"collapsible\"\n       :width \"100%\"\n       :style {:display (if @expanded? \"block\" \"none\")}\n       :child component]]]))\n\n(defn room-notes [coord]\n  (let [notes (re-frame/subscribe [::subs/notes coord])]\n    [expandable \"Room Notes\"\n     [re-com/input-textarea\n      :class \"montserrat\"\n      :style {:resize \"none\"\n              :width \"100%\"\n              :height \"100px\"\n              :font-weight \"bold\"}\n      :model notes\n      :on-change #(re-frame/dispatch [::events/update-notes coord %])\n      :change-on-blur? true]]))\n\n(defn room-menu [coord room-map]\n  (let [showing-coord (re-frame/subscribe [::subs/showing-coord])\n        showing? (reaction (= coord @showing-coord))]\n    [re-com/popover-anchor-wrapper\n     :showing? showing?\n     :class \"button-container unselectable\"\n     :style {:pointer-events \"auto\"}\n     :position :left-below\n     :anchor [re-com/md-icon-button\n              :md-icon-name \"zmdi-more-vert\"\n              :on-click #(if @showing?\n                           (re-frame/dispatch [::events/hide-room-menu])\n                           (re-frame/dispatch [::events/show-room-menu coord]))\n              :class \"room-menu\"\n              :size :smaller]\n     :popover [re-com/popover-content-wrapper\n               :on-cancel #(re-frame/dispatch [::events/hide-room-menu])\n               :no-clip? true\n               :body [re-com/v-box\n                      :children [(when (::db/from-dir room-map)\n                                   [regenerate-button\n                                    coord (::db/from-dir room-map)])\n                                 [encounter-button coord room-map]\n                                 [force-shop-button coord]\n                                 [force-shrine-button coord]\n                                 [room-notes coord]\n                                 [rotate-button coord ::db/cw]\n                                 [rotate-button coord ::db/ccw]]]]]))\n\n(defn room-cell\n  [coord room-map]\n  (let [current-floor (re-frame/subscribe [::subs/current-floor])\n        current-room (re-frame/subscribe [::subs/current-room])]\n    [re-com/v-box\n     :class \"room cell\"\n     :children [[:p {:class \"mono room-text unselectable\"\n                     :style {:align-self \"center\"\n                             :pointer-events \"auto\"\n                             :font-size\n                             (if (> 10 (::db/room-index room-map))\n                               \"30px\" \"25px\")}\n                     :on-click #(re-frame/dispatch\n                                 [::events/current-room @current-floor coord])}\n                 (gstring/format\n                  (if (and (= coord (::db/coord @current-room))\n                           (= @current-floor (::db/floor @current-room)))\n                    \"[%d]\" \"%d\")\n                  (::db/room-index room-map))]\n                [room-menu coord room-map]]]))\n\n(defn hallway\n  [dir secret?]\n  [:svg {:class dir}\n   [:line\n    (merge (case dir\n             :north {:x1 0 :y1 0 :x2 0 :y2 \"3em\"}\n             :south {:x1 0 :y1 0 :x2 0 :y2 \"3em\"}\n             :east {:x1 0 :y1 0 :x2 \"3em\" :y2 0}\n             :west {:x1 0 :y1 0 :x2 \"3em\" :y2 0})\n           {:style\n            (merge\n             (if secret? {:stroke-dasharray \"5,5\"} {})\n             {:stroke \"rgb(36,36,36)\"\n              :stroke-width \"2\"})})]])\n\n(defn explored-room\n  [coord room-map]\n  [:div {:class \"tile\"}\n   (concat [^{:key (str coord)} [room-cell coord room-map]]\n           (for [h (::db/hallways room-map)]\n             ^{:key (str coord h)} [hallway h false])\n           (for [sh (::db/secret-hallways room-map)]\n             ^{:key (str coord sh)} [hallway sh true]))])\n\n(defn room-panel\n  [coord floor-map]\n  (let [room-map (get floor-map coord)]\n    (case (::db/id room-map)\n      ::db/empty [:div {:class \"tile empty\"}]\n      ::db/unexplored [unexplored-room coord room-map]\n      [explored-room coord room-map])))\n\n(defn map-column\n  [column-index floor-map]\n  (let [{:keys [max-y]} (db/get-map-bounds floor-map)]\n    [re-com/v-box\n     :children\n     (for [y (range 0 (inc max-y))]\n       ^{:key y}\n       [room-panel [column-index y] floor-map])]))\n\n(defn map-panel []\n  (let [floor-map (re-frame/subscribe [::subs/floor-map])\n        {:keys [max-x min-x]} (db/get-map-bounds @floor-map)]\n    [re-com/h-box\n     :children [(for [x (range min-x (inc max-x))]\n                  ^{:key x}\n                  [map-column x @floor-map])]]))\n\n(defn loot-button []\n  [:div\n   {:class \"menu-button\"\n    :on-click #(re-frame/dispatch [::events/generate-loot])}\n   \"Loot!\"])\n\n(defn slugs-button []\n  [:div\n   {:class \"menu-button\"\n    :on-click #(re-frame/dispatch [::events/show-slugs])}\n   \"Slugs\"])\n\n(defn slugs-header []\n  [re-com/h-box\n   :class \"slug-row slug-header\"\n   :children [[:span {:class \"slug-left\"} [:b \"Color\"]]\n              [re-com/line :size \"2px\" :color aqua-green]\n              [:span {:class \"slug-right\"} [:b \"Effect\"]]]])\n\n(defn slug-row [idx [color effect]]\n  [re-com/h-box\n   :class (str \"slug-row \"\n               (if (even? idx) \"slug-row-even\" \"slug-row-odd\"))\n   :children [[:span {:class \"slug-left\"} color]\n              [re-com/line :size \"2px\" :color aqua-green]\n              [:span {:class \"slug-right\"} effect]]])\n\n(defn slug-table []\n  (let [show-slugs (re-frame/subscribe [::subs/show-slugs])\n        slug-map (re-frame/subscribe [::subs/slug-map])]\n    (when @show-slugs\n      [re-com/modal-panel\n       :class \"slug-panel\"\n       :backdrop-on-click #(re-frame/dispatch [::events/hide-slugs])\n       :child [re-com/v-box\n               :children [[slugs-header]\n                          (for [[idx slug-mapping]\n                                (zipmap (range) @slug-map)]\n                            ^{:key idx} [slug-row idx slug-mapping])]]])))\n\n(defn generate-button []\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/show-generate-dialog])}\n   \"Generate...\"])\n\n(defn history-button []\n  [:div\n   {:class \"menu-button\"\n    :style {:display \"flex\"\n            :align-items \"center\"\n            :justify-content \"center\"\n            :flex-direction \"row\"}\n    :on-click #(re-frame/dispatch [::events/show-history])}\n   [:p {:style {:margin \"0\"}} \"History\"]\n   [re-com/md-icon-button\n    :md-icon-name \"zmdi-time-restore\"\n    :disabled? true]])\n\n(defn reset-button []\n  [:div {:class \"menu-button\"\n         :on-click #(re-frame/dispatch [::events/show-reset-dialog])}\n   \"Reset All\"])\n\n(defn new-character-button []\n  [:a {:href (router/url-for :new-character)\n       :style {:color \"inherit\"\n               :text-decoration \"none\"}\n       :class \"menu-button\"} \"New Character\"])\n\n(defn button-overlay []\n  (let [showing? (reagent/atom false)]\n    [re-com/popover-anchor-wrapper\n     :showing? showing?\n     :class \"button-container\"\n     :position :left-below\n     :anchor [re-com/md-icon-button\n              :style {:padding \"10px\"}\n              :md-icon-name \"zmdi-menu\"\n              :on-click #(swap! showing? not)\n              :size :regular]\n     :popover [re-com/popover-content-wrapper\n               :on-cancel #(swap! showing? not)\n               :body [re-com/v-box\n                      :children [[loot-button]\n                                 [slugs-button]\n                                 [generate-button]\n                                 [history-button]\n                                 [new-character-button]\n                                 [reset-button]]]]]))\n\n(defn right-panel []\n  [re-com/box\n   :size \"auto\"\n   :style {:height \"auto\"\n           :width \"100%\"\n           :overflow \"auto\"}\n   :child [re-com/h-box\n           :justify :center\n           :class \"main-panel\"\n           :children [[map-panel]\n                      [button-overlay]]]])\n\n(def generate-options\n  (->> (db/get-table-names)\n       (map-indexed\n        (fn [idx p]\n          {:id idx\n           :path p\n           :label (string/join \" - \" (map keyword->display-str p))}))))\n\n(def adv-map\n  [{:id 0 :value -3 :label \"[---]\"}\n   {:id 1 :value -2 :label \"[--]\"}\n   {:id 2 :value -1 :label \"[-]\"}\n   {:id 3 :value 0 :label \"None\"}\n   {:id 4 :value 1 :label \"[+]\"}\n   {:id 5 :value 2 :label \"[++]\"}\n   {:id 6 :value 3 :label \"[+++]\"}])\n\n(defn generate->hiccup\n  [{name ::db/name roll ::db/roll description ::db/description}]\n  [re-com/v-box\n   :children [(when name [re-com/title :level :level2 :label name])\n              (when description [:p {:style {:class \"montserrat\"}}\n                                 [:b description]])\n              (when roll [:p {:style {:class \"montserrat\"}}\n                          [:b (str \"Roll: \" roll)]])]])\n\n(defn generate-dialog [generate-choice advantage-choice]\n  (let [disable-button? (reaction (nil? @generate-choice))\n        generate-result (re-frame/subscribe [::subs/generate-result])]\n    [re-com/v-box\n     :width \"600px\"\n     :children\n     [[re-com/single-dropdown\n       :choices generate-options\n       :model generate-choice\n       :width \"100%\"\n       :on-change #(reset! generate-choice %)\n       :placeholder \"Select Object To Generate...\"\n       :style {:padding-bottom \"10px\"}\n       :class \"montserrat generate-dropdown\"]\n      [re-com/h-box\n       :style {:align-content \"center\"\n               :align-items \"center\"\n               :padding-bottom \"10px\"}\n       :children [[re-com/label\n                   :label [:b \"Advantage/Disadvantage:\"]\n                   :style {:text-align \"center\"\n                           :align-self \"center\"\n                           :font-size \"15px\"\n                           :padding-right \"10px\"}\n                   :class \"montserrat\"]\n                  [re-com/single-dropdown\n                   :choices adv-map\n                   :model advantage-choice\n                   :class \"montserrat\"\n                   :on-change #(reset! advantage-choice %)]]]\n      [re-com/h-box\n       :width \"100%\"\n       :justify :end\n       :children [[re-com/button\n                   :label [:b \"Generate\"]\n                   :style {:width \"100px\"}\n                   :disabled? disable-button?\n                   :on-click #(re-frame/dispatch\n                               [::events/generate-generic\n                                (:path (nth generate-options @generate-choice))\n                                (:value (nth adv-map @advantage-choice))])\n                   :class \"montserrat button\"]]]\n      (when @generate-result\n        [re-com/line :color aqua-green\n         :style {:margin-top \"10px\"\n                 :margin-bottom \"10px\"}])\n      (when @generate-result (generate->hiccup @generate-result))]]))\n\n(defn reset-dialog []\n  (let [show-reset-dialog? (re-frame/subscribe [::subs/show-reset-dialog?])\n        reset-slugs? (reagent/atom true)]\n    (when @show-reset-dialog?\n      [re-com/modal-panel\n       :backdrop-on-click #(re-frame/dispatch [::events/hide-reset-dialog])\n       :child\n       [re-com/v-box\n        :children\n        [[:p {:class \"modal-result\"}\n          [:b \"Reset all floors and start a new generation?\"]]\n         [re-com/h-box\n          :children [[:p [:b \"Reset slugs?\"]]\n                     [re-com/gap :size \"10px\"]\n                     [re-com/checkbox\n                      :model reset-slugs?\n                      :on-change #(reset! reset-slugs? %)]]]\n         [re-com/h-box\n          :justify :end\n          :children\n          [[re-com/button\n            :label \"Reset\"\n            :on-click #(re-frame/dispatch [::events/reset-all @reset-slugs?])\n            :class \"button\"]]]]]])))\n\n(defn history-dialog []\n  (let [history (re-frame/subscribe [::subs/history])\n        show-history? (re-frame/subscribe [::subs/show-history?])\n        formatter (time-format/formatter \"yyyyMMdd hh:mm\")]\n    (when @show-history?\n      [re-com/modal-panel\n       :class \"history-panel\"\n       :backdrop-on-click #(re-frame/dispatch [::events/hide-history])\n       :child\n       [:table {:id \"history\"}\n        [:thead\n         [:tr\n          [:th [:p {:class \"header\"} [:b \"Timestamp\"]]]\n          [:th [:p {:class \"header\"} [:b \"Floor\"]]]\n          [:th [:p {:class \"header\"} [:b \"Room\" [:br] \"Index\"]]]\n          [:th [:p {:class \"header\"} [:b \"Description\"]]]]]\n        [:tbody\n         (for [[idx {:keys [description room-index floor time]}]\n               (map-indexed (comp vec list) @history)]\n           ^{:key idx} [:tr\n                        [:td (time-format/unparse-local-date\n                              formatter\n                              (time/to-default-time-zone time))]\n                        [:td (keyword->display-str floor)]\n                        [:td {:style {:text-align \"center\"}}\n                         (str room-index)]\n                        [:td {:class \"description\"}\n                         (text->hiccup description)]])]]])))\n\n(defn shifting-sands-panel []\n  (let [modal-result (re-frame/subscribe [::subs/modal-result])\n        show-generate? (re-frame/subscribe [::subs/show-generate-dialog?])\n        generate-choice (reagent/atom nil)\n        advantage-choice (reagent/atom 3)]\n    [re-com/v-box\n     :height \"100%\"\n     :style {:overflow \"hidden\"}\n     :children\n     [[re-com/h-box\n       :height \"100%\"\n       :style {:flex-direction \"row-reverse\"}\n       :children\n       [[sidebar]\n        [re-com/line :color aqua-green]\n        [right-panel]\n        [slug-table]\n        (when @show-generate?\n          [re-com/modal-panel\n           :backdrop-on-click\n           #((reset! generate-choice 0)\n             (reset! advantage-choice 3)\n             (re-frame/dispatch [::events/clear-generate-result])\n             (re-frame/dispatch [::events/hide-generate-dialog]))\n           :child [generate-dialog generate-choice advantage-choice]])\n        (when @modal-result\n          [re-com/modal-panel\n           :backdrop-on-click #(re-frame/dispatch [::events/clear-modal-result])\n           :child [:p {:class \"modal-result\"}\n                   (text->hiccup @modal-result)]])\n        [reset-dialog]\n        [history-dialog]]]]]))\n\n(def starting-character-keys (concat db/character-traits\n                                     db/starting-equipment))\n\n(defn character-row\n  [even? character k]\n  [re-com/h-box\n   :class (if even? \"character-even\" \"character-odd\")\n   :children [[:span {:class \"mono character-left\"} (keyword->display-str k)]\n              [re-com/line :size \"2px\" :color aqua-green]\n              [:span {:class \"montserrat character-right\"}\n               (text->hiccup (get character k))]]])\n\n(defn new-character-panel []\n  (let [character @(re-frame/subscribe [::subs/new-character])]\n    [re-com/v-box\n     :children\n     [[re-com/h-box\n       :class \"character-header\"\n       :width \"100%\"\n       :style {:align-contents \"center\"}\n       :children\n       [[re-com/title\n         :class \"character-header\"\n         :level :level2\n         :label \"New Character\"]\n        [re-com/gap :size \"1\"]\n        [re-com/md-icon-button\n         :class \"button\"\n         :size :larger\n         :style {:align-self \"center\"}\n         :md-icon-name \"zmdi-refresh\"\n         :on-click #(re-frame/dispatch [::events/generate-new-character])]\n        [re-com/gap :size \"20px\"]]]\n      [re-com/gap :size \"5px\"]\n      (for [[idx trait] (map-indexed vector starting-character-keys)]\n        ^{:key idx} [character-row (even? idx) character trait])]]))\n\n(defn not-found-panel []\n  [re-com/v-box\n   :children [[re-com/title\n               :class \"mono\"\n               :style {:padding-left \"20px\"}\n               :level :level1\n               :label \"Not Found\"]]])\n\n(defn pages [page-name]\n  (case page-name\n    :home [shifting-sands-panel]\n    :new-character [new-character-panel]\n    :not-found [not-found-panel]))\n\n(defn main-panel []\n  (let [active-page @(re-frame/subscribe [::subs/active-page])]\n    (pages active-page)))\n"]}